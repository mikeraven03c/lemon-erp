<?php

namespace App\Packages\$PLURALNAME$\Controllers;

use Illuminate\Http\Request;
use App\Packages\$PLURALNAME$\Models\$NAME$;
use App\Packages\$PLURALNAME$\Contracts\$NAME$Contract;
use App\Packages\$PLURALNAME$\Resources\$NAME$Resource;
use App\Packages\$PLURALNAME$\Requests\$NAME$FormRequest;

class $NAME$Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        $$LCNAME$ = $NAME$::latest()->get();
        return $NAME$Resource::collection($$LCNAME$);
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store($NAME$FormRequest $request, $NAME$Contract $$LCNAME$Contract)
    {
        try {
            $$LCNAME$ = $$LCNAME$Contract->store($request);
            return (new $NAME$Resource($$LCNAME$))->additional([
                'status' => 1,
                'message' => $$LCNAME$->$MCOLUMN$ . config('message.store.positive')
            ]);
        } catch (\Exception $e) {
            return [
                'message' => $request->$MCOLUMN$ . config('message.store.negative'),
                'status' => 0,
                'exception' => $e->getMessage()
            ];
        }
    }

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        return (new $NAME$Resource($NAME$::findOrFail($id)));
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update($NAME$FormRequest $request, $NAME$ $$LCNAME$, $NAME$Contract $$LCNAME$Contract)
    {
        try {
            $$LCNAME$ = $$LCNAME$Contract->update($$LCNAME$, $request);
            return (new $NAME$Resource($$LCNAME$))->additional([
                'status' => 1,
                'message' => $$LCNAME$->$MCOLUMN$ . config('message.update.positive')
            ]);
        } catch (\Exception $e) {
            return [
                'message' => $request->$MCOLUMN$ . config('message.update.negative'),
                'status' => 0,
                'exception' => $e->getMessage()
            ];
        }
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy(Request $request, $NAME$Contract $$LCNAME$Contract)
    {
        $status = $$LCNAME$Contract->delete($request->all());
        return [
            'status' => $status,
            'message' => $status ? config('message.delete.positive') : config('message.delete.negative')
        ];
    }
}
